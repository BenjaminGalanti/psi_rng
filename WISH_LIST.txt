WISH LIST :
- Manage properly the full screen (with a button ?) and the keyBoard input. Manage also smart phone via mousePress ?
	=> Need to create some buttons
- Manage the pool differently : fill it the first time then wait it to be really empty to make it not ready. Otherwise it alternate constantly between ready state and not ready
- Create a C program that call rngtest each 2000 bit and send results via websockets. This could help to rapidly tune the RNG.
- Pay attention that with Bezier animation the experiment doesn't end before all the curves are displayed
- create a makefile
- Close WS connection automatically when experiment is ended or when user wait to much to input a response (like 1 min)
- Try to manage in a more flowing manner the fact that the curve drawing time change when the second point is generated, or otherwise, start to draw the curve only when the next curve is ready ! It's obviously simpler!
	=> HAVE TRY : unfortunetly the drawing time is often more than the estimate time (it doesn't take into account the time needed to run the application I think) so, even with this solution it doesn't animate smoothly.
		=> NEED TO FIND ANOTHER SOLUTION !
			=> I think the only solution is to decouple entirely the render of the bezier and the number generation. We need to have always the same speed for drawing, regardless the distance travel by the robot. So, the drawing can stop way after the moves but it has to be calculate.
- Use PVector instead of int array in processingJs to store points...
- fix the collision bug with the robot and the frame
- Remove the canva's margins
- Add a proper log system ? => Maybe log should be done only via client and then save to the server hosting experiments?
- Modify index.html to load either the robot_hazard experiment or random_graph
- Test how many movement are made with one robot and with 10 to see if there is any difference
- Create a website to store users and results and allow people do to experiment all over the world
- find a name : tychoscope ? psi-experiment ?
- configure ddclient on the raspbery pi to change ip dynamically

DONE:
- Remove all globals from processing code
- Refactor the code in order to make tychoscope independant of the rest, like rng
- Be able to pass options (draw curve, hide robot, speed, duration etc.) to the experiment instead of using constants
- separate the number experiment, the peoc'h experiment and the b√©zier in 3 distinct files
- Display proper error message when there is no websocket connection or when we don't recieve numbers
- register a dyndns domain name for the 
- Anim smoothly the bezier curve by displaying only part of the last curve instead of display it "brutally" when it's done.
We wan't to fill that the curve is drawing in real time :)
- draw bezier curves (made of 4 points) instead of lines for the robot trajectory.
- Build the electronic device
- make it work on the raspberry pi
- Test cross domain websocket
- use mkfifo instead of mknode
- modify client/server code to work properly with FIFO
- add message like "Wait for client to connect"
- Modify code to work with binary data and test if it work in JS