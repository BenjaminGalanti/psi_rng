//Try to simulate 10 tychoscope simulnateously
Tychoscope[] tychoscope_array = new Tychoscope[1];
PFont f;
Rng rng;
int start_time;
int last_time;
//in milliseconds
final int EXPERIMENT_DURATION = 10*60*1000;
final int NB_EXPERIMENTS = 30;

//the board dimensions in cm
final int BOARD_WIDTH = 88;
final int BOARD_HEIGHT = 59;
int current_xp_num = 0;
boolean first_setup = true;


//Size of a centimeter in pixel
int cm_px;
final boolean HIDE_ROBOT = true;
final boolean HIDE_TRAIL = false;
final boolean BEZIER_TRAIL = true;
boolean experiment_started = false;

ArrayList last_xp_quarters = new ArrayList();
void setup(){
  //The size of the window must have the same ratio as in the poec'h experiment
  //which is 88/59
  boolean width_over_height = BOARD_WIDTH/BOARD_HEIGHT > screen.width/screen.height;
  int size_x, size_y;
  if(width_over_height){
    size_x = screen.width;
    size_y = int(float(size_x) * float(BOARD_HEIGHT)/float(BOARD_WIDTH));
    cm_px = screen.width / BOARD_WIDTH;
  }
  else{
    size_y = screen.height;
    size_x = int(float(size_y) * float(BOARD_WIDTH)/float(BOARD_HEIGHT));
    cm_px = screen.height / BOARD_HEIGHT;
  }
  size(size_x, size_y);
  f = createFont("Arial", 20, true);
  for(int i = 0 ; i < tychoscope_array.length() ; i++){
    tychoscope_array[i] = new Tychoscope();
  }
  
  
  if(first_setup){
    //rng = new Rng(50, 100);
    rng = new Rng(100, 0);
    //rng.start_homogeneity_test();
    first_setup = false;
  }
  
  //Needed to stop automatically the experiment
  experiment_started = false;
  
  current_xp_num++;
}

void draw(){
  background (255);
  
  //Don't display anything if experiment ended
  //In order to be able to shoot the lines
  if(!experiment_started){
      textFont(f,20);
      fill(0);
      textAlign(CENTER, CENTER);
    if(!rng.is_ready()){
      text("Generating random numbers pool... ", width/2, height/2);
    }
    else{
      if(last_xp_quarters.size() > 0){
        text("Number was : " + (last_xp_quarters.get(0)+1) + " ?", width/2, height/2 - 20);  
      }
      text("Press any key to start experiment... ", width/2, height/2);
    }
  }
  else{
    int current_time = millis();
    int delta = current_time - last_time;
    last_time = current_time;
    if(last_time - start_time >= EXPERIMENT_DURATION){
      finish_experiment();
    }


    for(int i = 0 ; i < tychoscope_array.length() ; i++){
      if(rng.is_ready()){
        tychoscope_array[i].move();  
      }
    }
    //We only display one robot cause it took to much ressource otherwise
    tychoscope_array[0].display();
    /*
    textFont(f,300);
    text("1", 300, 200);
    text("2", width-300, 200);
    text("3", 300, height - 200);
    text("4", width-300, height - 200);
    line(0, height/2, width, height/2);
    line(width/2, 0, width/2, height);
    */
  }
}

void start_experiment(){
  experiment_started = true;
  start_time = millis();
  for(int i = 0 ; i < tychoscope_array.length() ; i++){
    //init last time
    tychoscope_array[i].last_time = millis();
    tychoscope_array[i].current_curve_drawing_time = 0;
  }
  last_time = start_time;
}

void finish_experiment(){
  experiment_started = false;
  int[] average_quarter_list = { 0, 0, 0, 0 };
  for(int i = 0 ; i < tychoscope_array.length() ; i++){
    int quarter = tychoscope_array[i].get_average_quarter();
    average_quarter_list[quarter]++;
  }

  int i = 0;
  int average_quarter = i;
  int max_nb_points = 0;
  for(i ; i < 4 ; i++){
    if(average_quarter_list[i] > max_nb_points){
      max_nb_points = average_quarter_list[i];
      average_quarter = i;
    }
  }
 
  last_xp_quarters.remove(0);
  last_xp_quarters.add(average_quarter);
  //TODO : save experiment data here...
  //We can automatically launch sevral experiments
  if(current_xp_num == NB_EXPERIMENTS){
    exit(); // Stops the program
  }
  else{
    //Restart an experiment
    setup();
  }
}

void keyPressed(){
  if(key == ESC){
    //For now, just exit en ESC cause we are not recording anything
    exit();
    /*experiment_started = false;
    //overriding escape behaviour
    key = 0;*/
  }
  else if(!experiment_started && rng.is_ready()){
    start_experiment();
  }
}
// Called whenever there is something available to read
void serialEvent(int num) {
  rng.number_recieved(num);
}
