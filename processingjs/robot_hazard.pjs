Tychoscope t;
PFont f;
PrintWriter output;
Rng rng;
int start_time;
int last_time;
boolean experiment_started = false;
//in milliseconds
final int EXPERIMENT_DURATION = 60*1000;
final int NB_EXPERIMENTS = 30;
//the board dimensions in cm
final int BOARD_WIDTH = 88;
final int BOARD_HEIGHT = 59;
//Will be usefull to save logs and traces
int experiment_num = 0;
int current_xp_num = 0;
boolean first_setup = true;
//Size of a centimeter in pixel
int cm_px;
final boolean HIDE_ROBOT = true;
final boolean HIDE_TRAIL = false;
final boolean BEZIER_TRAIL = true;
void setup(){
  //The size of the window must have the same ratio as in the poec'h experiment
  //which is 88/59
  boolean width_over_height = BOARD_WIDTH/BOARD_HEIGHT > screen.width/screen.height;
  int size_x, size_y;
  if(width_over_height){
    size_x = screen.width;
    size_y = int(float(size_x) * float(BOARD_HEIGHT)/float(BOARD_WIDTH));
    cm_px = screen.width / BOARD_WIDTH;
  }
  else{
    size_y = screen.height;
    size_x = int(float(size_y) * float(BOARD_WIDTH)/float(BOARD_HEIGHT));
    cm_px = screen.height / BOARD_HEIGHT;
  }
  size(size_x, size_y);
  f = createFont("Arial", 20, true);
  t = new Tychoscope();
  
  if(first_setup){
    //rng = new Rng(50, 100);
    rng = new Rng(1000, 1);
    //rng.start_homogeneity_test();
    first_setup = false;
  }
  
  //Needed to stop automatically the experiment
  experiment_started = false;
  
  current_xp_num++;
}

void draw(){
  background (255);
  
  //Don't display anything if experiment ended
  //In order to be able to shoot the lines
  if(!experiment_started){
      textFont(f,20);
      fill(0);
      textAlign(CENTER, CENTER);
    if(!rng.is_ready()){
      text("Generating random numbers pool... ", width/2, height/2);
    }
    else{
      text("Press any key (except ESC) to start experiment... ", width/2, height/2);
    }
  }
  else{
    int current_time = millis();
    int delta = current_time - last_time;
    last_time = current_time;
    if(last_time - start_time >= EXPERIMENT_DURATION){
      finish_experiment();
    }

    t.display();
  }
}

void start_experiment(){
  experiment_started = true;
  start_time = millis();
  last_time = start_time;
}

void finish_experiment(){
  experiment_started = false;
  //TODO : save experiment data here...
  //We can automatically launch sevral experiments
  if(current_xp_num == NB_EXPERIMENTS){
    exit(); // Stops the program
  }
  else{
    //Restart an experiment
    setup();
  }
}

void keyPressed(){
  if(key == ESC){
    //For now, just exit en ESC cause we are not recording anything
    exit();
    /*experiment_started = false;
    //overriding escape behaviour
    key = 0;*/
  }
  else if(!experiment_started && rng.is_ready()){
    start_experiment();
  }
}
// Called whenever there is something available to read
void serialEvent(int num) {
  rng.number_recieved(num);
}
